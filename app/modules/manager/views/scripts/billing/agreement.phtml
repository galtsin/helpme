<?php
$agreement = $this->agreement;
if($agreement instanceof HM_Model_Billing_Agreement):
?>
<?php
$agreementJson = Zend_Json::encode($agreement->getData()->toArray());
$jScript = <<<JS
require([
    "dojo/_base/declare", // declare
    "dojo/dom",
    "dojo/dom-style",
    "dojo/html",
    "dojo/dom-class",
    "dojo/dom-construct",
    "dojo/dom-form",
    "dojo/string",
    "dojo/_base/array",
    "dojo/date/locale",
    "dojo/on",
    "dojo/_base/lang",
    "dojo/query",
    "dojo/hash",
    "dojo/router",
    "dojo/store/Memory",
    "dojo/aspect",
    "core/helper/fn",
    "dijit/Dialog",
    "core/Ajax",
    "core/layout/Overlay",
    "dijit/registry",
    "dijit/popup",
    "dijit/layout/ContentPane",
    "dijit/_WidgetBase",
    "dijit/_Container",
    "dijit/_Contained",
    "dijit/_TemplatedMixin",
    "dojo/text!app/modules/manager/billing/template/test.html",
    "core/layout/OverlayPane"
], function(declare, dom, domStyle, domHtml, domClass, domConstruct, domForm, string, array, dateLocale, on, lang,
query, hash, router, storeMemory, aspect, HelperFn, dijitDialog, Ajax, Overlay, dijitRegistry, dijitPopup, ContentPane,
_WidgetBase, _Container, _Contained, _TemplatedMixin, text, OverlayPane){

    dojo.ready(function(){

        var contentPane = new ContentPane({
            id: 'content',
            style: {padding: 0, margin: 0,  overflow: "hidden"},
            clear: function(){
                array.forEach(contentPane.getChildren(), function(widget){
                    contentPane.removeChild(widget);
                });
            }
        }, 'content');

        function getDialogOverlayHelper(options){
            var Dialog = new dijitDialog(options || {});
            var showDialogBeforeHandler = aspect.before(Dialog, 'show', function(){
                showDialogBeforeHandler.remove();
                Dialog.addChild(new OverlayPane({
                    domNode: domConstruct.create('div', {
                        style: {
                            position: "relative", width: "200px", height: "100px"
                        }
                    })
                }));
                Dialog.getChildren()[0].show();
                var addChildOverlayPaneBeforeHandler = aspect.before(Dialog.getChildren()[0], 'addChild', function(){
                    addChildOverlayPaneBeforeHandler.remove();
                    domStyle.set(Dialog.getChildren()[0].domNode, {
                       width: "auto", height: "auto"
                    });
                    Dialog.getChildren()[0].hide();
                    return arguments;
                });
                return arguments;
            });

            var ajaxRequestBeforeHandler = aspect.before(Ajax, 'request', function(){
                Dialog.getChildren()[0].show();
                return arguments;
            });

            var ajaxRequestAfterHandler = aspect.after(Ajax, 'request', function(deferred){
                Dialog.getChildren()[0].hide();
                return deferred;
            });

            aspect.after(Dialog, 'hide', function(){
                clearHandlers();
            });

            aspect.after(Dialog, 'destroy', function(){
                clearHandlers();
            });

            function clearHandlers(){
                ajaxRequestBeforeHandler.remove();
                ajaxRequestAfterHandler.remove();
            }

            return Dialog;
        }

        var SubscriptionGuestsWidget = declare("SubscriptionGuestsWidget", [_WidgetBase, _Contained, _TemplatedMixin], {
            templateString: dom.byId('subscription-guest-template').innerHTML,
            subscribersStore: null,
            containerNode: null,
            data: null,
            postCreate: function(){
                this.containerNode = this.get('subscribersNode');
                this.subscribersStore = new storeMemory();
                var _widget = this;

                aspect.after(this, 'fetch', function(deferred){
                    deferred.then(function(items){
                        array.forEach(items, function(item){
                            var _item = item;
                            setTimeout(function(){
                                _widget.insertChildNode(_item);
                            }, 0);
                        });
                    })
                });

                on(this.get('removeSubscriberNode'), 'click', function(event){
                    var formObj = domForm.toObject(event.target.form);
                    if(formObj['guests[]'] instanceof Array){
                        array.forEach(formObj['guests[]'], function(id){
                            var guest = id;
                            setTimeout(function(){
                                _widget.removeSubscriber(guest);
                            }, 0);
                        })
                    }
                    else if(typeof formObj['guests[]'] == "string"){_widget.removeSubscriber(formObj['guests[]']);}
                });

            },
            createChildNode: function(data){
                return domConstruct.toDom(
                    string.substitute(dom.byId('subscription-guest-row-template').innerHTML, data, function(variable){
                        return variable || '';
                    })
                );
            },
            insertChildNode: function(data){
                if(!this.subscribersStore.get(data.id)){
                    this.subscribersStore.add(data);
                    domConstruct.place(this.createChildNode(data), this.containerNode, 'last');
                }
            },
            removeChildNode: function(id){
                if(this.subscribersStore.get(id)){
                    this.subscribersStore.remove(id);
                    domConstruct.destroy(this._getChildNodeFullName(id));
                }
            },
            _getChildNodeFullName: function(id){
                return 'subscriptionGuestNode_' + id;
            },
            fetch: function(){
                return Ajax.load(
                    Ajax.url('api/1/agreement/' + this.data.id + '/get-subscription-guests'), {
                }).then(function(response){return response.data;});
            },
            addSubscriber: function(guest){
                var _widget = this;
                return Ajax.send(
                    Ajax.url('api/1/agreement/' + this.data.id + '/subscribe-guest'), {
                    data: {guest: guest.id}
                }).then(function(response){
                    if(response.result == guest.id) _widget.insertChildNode(guest);
                    return response.result;
                });
            },
            removeSubscriber: function(id){
                var _widget = this;
                return Ajax.send(
                    Ajax.url('api/1/agreement/' + this.data.id + '/unsubscribe-guest'), {
                    data: {guest: id}
                }).then(function(response){
                    if(response.result == id) _widget.removeChildNode(id);
                    return response.result;
                });
            },
            resendSubscribe: function(){

            }
        });

        /* Пользователи подписки */
        var SubscriptionUsersWidget = declare("SubscriptionUsersWidget", [_WidgetBase, _Contained, _TemplatedMixin], {
            templateString: dom.byId('subscription-users-template').innerHTML,
            subscribersStore: null,
            containerNode: null,
            data: null,
            postCreate: function(){
                this.containerNode = this.get('subscribersNode');
                this.subscribersStore = new storeMemory();
                var _widget = this;

                aspect.after(this, 'fetch', function(deferred){
                    deferred.then(function(items){
                        array.forEach(items, function(item){
                            var _item = item;
                            setTimeout(function(){
                                _widget.insertChildNode(_item);
                            }, 0);
                        });
                    })
                });

                on(this.get('removeSubscriberNode'), 'click', function(event){
                    var formObj = domForm.toObject(event.target.form);
                    if(formObj['users[]'] instanceof Array){
                        array.forEach(formObj['users[]'], function(id){
                            var user = id;
                            setTimeout(function(){
                                _widget.removeSubscriber(user);
                            }, 0);
                        })
                    }
                    else if(typeof formObj['users[]'] == "string"){_widget.removeSubscriber(formObj['users[]']);}
                });

            },
            createChildNode: function(data){
                return domConstruct.toDom(
                    string.substitute(dom.byId('subscription-user-row-template').innerHTML, data, function(variable){
                        return variable || '';
                    })
                );
            },
            insertChildNode: function(data){
                if(!this.subscribersStore.get(data.id)){
                    this.subscribersStore.add(data);
                    domConstruct.place(this.createChildNode(data), this.containerNode, 'last');
                }
            },
            removeChildNode: function(id){
                if(this.subscribersStore.get(id)){
                    this.subscribersStore.remove(id);
                    domConstruct.destroy(this._getChildNodeFullName(id));
                }
            },
            _getChildNodeFullName: function(id){
                return 'subscriptionUserNode_' + id;
            },
            fetch: function(){
                return Ajax.load(
                    Ajax.url('api/1/agreement/' + this.data.id + '/get-subscription-users'), {
                }).then(function(response){return response.data;});
            },
            addSubscriber: function(user){
                var _widget = this;
                return Ajax.send(
                    Ajax.url('api/1/agreement/' + this.data.id + '/subscribe-user'), {
                    data: {user: user.id}
                }).then(function(response){
                    if(response.result == user.id) _widget.insertChildNode(user);
                    return response.result;
                });
            },
            removeSubscriber: function(id){
                var _widget = this;
                return Ajax.send(
                    Ajax.url('api/1/agreement/' + this.data.id + '/unsubscribe-user'), {
                    data: {user: id}
                }).then(function(response){
                    if(response.result == id) _widget.removeChildNode(id);
                    return response.result;
                });
            }
        });

        /* Виджет поиска Пользователя */
        var SearchAccountWidget = declare("SearchAccountWidget", [_WidgetBase, _Contained, _TemplatedMixin], {
            templateString: dom.byId('search-account-template').innerHTML,
            postCreate: function(){
                var _widget = this;
                this.containerNode = this.get('searchAccountResultsContainerNode');
                on(this.get('searchAccountFormNode'), 'submit', function(event){
                    event.preventDefault();
                    if(event.target['filters[equal][email][]'].value.length > 6) _widget._searchUser(); // TODO: Регулярка на Email
                });
                aspect.after(this, '_searchUser', function(deferred){
                    deferred.then(function(response){
                        if(response.data.length == 0){
                            _widget._searchGuest();
                        }
                    })
                });
                aspect.after(this, '_searchGuest', function(deferred){
                    deferred.then(function(response){
                        if(response.data.length == 0){
                            _widget._registerGuest();
                        }
                    })
                });
            },
            _searchUser: function(){
                var _widget = this;
                var responsePromise = Ajax.load(Ajax.url('api/1/user/query'), {
                    handleAs: 'json',
                    query: domForm.toObject(this.get('searchAccountFormNode'))
                });
                responsePromise.then(function(response){
                    if(response.data.length > 0){
                        _widget._displayResults(
                            string.substitute(dom.byId('search-account-user-result-template').innerHTML, response.data[0], function(variable){
                                return variable || '';
                            })
                        );
                        on(dom.byId('search-account-user-result-form')['select'], 'click', function(){
                            _widget.onSelectUser(response.data[0]);
                        });
                    }
                });
                return responsePromise;
            },
            _searchGuest: function(){
                var _widget = this;
                var responsePromise = Ajax.load(Ajax.url('api/1/guest/query'), {
                    handleAs: 'json',
                    query: domForm.toObject(this.get('searchAccountFormNode'))
                });
                responsePromise.then(function(response){
                    if(response.data.length > 0){
                        _widget._displayResults(
                            string.substitute(dom.byId('search-account-guest-result-template').innerHTML, response.data[0], function(variable){
                                return variable || '';
                            })
                        );
                        on(dom.byId('search-account-guest-result-form')['select'], 'click', function(){
                            _widget.onSelectGuest(response.data[0]);
                        });
                    }
                });
                return responsePromise;
            },
            _registerGuest: function(){
                var _widget = this;
                this._displayResults(
                    string.substitute(dom.byId('search-account-guest-register-template').innerHTML, {email: this.get('searchAccountFormNode')['filters[equal][email][]'].value}, function(variable){
                        return variable || '';
                    })
                );
                on(dom.byId('search-account-guest-register-form'), 'submit', function(event){
                    event.preventDefault();
                    var responsePromise = Ajax.send(Ajax.url('api/1/guest/post'), {
                        handleAs: 'json',
                        query: domForm.toObject(event.target)
                    });
                    responsePromise.then(function(response){
                        if(response.result > -1){
                            _widget._searchGuest();
                        }
                    })
                })
            },
            _displayResults: function(content){
                domConstruct.empty(this.containerNode);
                domConstruct.place(content, this.containerNode, 'last');
            },
            onSelectUser: function(user){
                return user;
            },
            onSelectGuest: function(guest){
                return guest;
            }
        });

        var AgreementDetailWidget = declare("AgreementDetailWidget", [_WidgetBase, _Contained], {
            postCreate: function(){
                query('a[data-dojo-attach-point="changeAgreementData"]', this.domNode).on('click', function(){
                    alert('f');
                })
            }
        });

        router.register("get-detail", function(event){
            contentPane.clear();
            if(!dijitRegistry.byId(event.newPath)){
                var container = new ContentPane({
                    id: event.newPath,
                    style: {padding: 0, margin: 0, overflow: "hidden"},
                    content: dom.byId('agreementDetail').innerHTML
                });
                //new AgreementDetailWidget();



                contentPane.addChild(container);

                // ==
                var agreement = $agreementJson;
                partialEditingHelper(dom.byId('edit-agreement-detail-form')).onSend = function(field){
                    return Ajax.send(Ajax.url(HelperFn.doPath('api/1/agreement/:id/put', {id: agreement.id})), {
                        data: field
                    }).then(function(response){
                        return response.result;
                    })
                };
                // ==

            } else {
                contentPane.addChild(dijitRegistry.byId(event.newPath));
            }
        });

        router.register("get-subscribers", function(event){
            contentPane.clear();
            if(!dijitRegistry.byId(event.newPath)){
                var container = new ContentPane({
                    id: event.newPath,
                    style: {padding: 0, margin: 0, overflow: "hidden"}
                });

                var searchAccountWidget = new SearchAccountWidget();
                var Dialogbox = new dijitDialog();
                var Overlay = new OverlayPane({
                    domNode: searchAccountWidget.get('overlayNode')
                });

                // Изменить размеры диалога после отображения результатов
                aspect.after(searchAccountWidget, '_displayResults', function(){
                    Dialogbox.resize();
                });

                var subscriptionUsersWidget = new SubscriptionUsersWidget({data: $agreementJson});
                container.addChild(subscriptionUsersWidget);
                subscriptionUsersWidget.fetch();

                var subscriptionGuestsWidget = new SubscriptionGuestsWidget({data: $agreementJson});
                container.addChild(subscriptionGuestsWidget);
                subscriptionGuestsWidget.fetch();

                // Установить Оверлей Ajax-запросов внутри диалога на время его Отображения
                aspect.before(Dialogbox, 'show', function(){
                    var ajaxRequestBeforeHandler = aspect.before(Ajax, 'request', function(){
                        Overlay.show();
                    });
                    var ajaxRequestAfterHandler = aspect.after(Ajax, 'request', function(deferred){
                        Overlay.hide();
                        return deferred;
                    });
                    aspect.after(Dialogbox, "hide", function(){
                        ajaxRequestBeforeHandler.remove();
                        ajaxRequestAfterHandler.remove();
                    });
                });

                // Для Пользователей
                on(subscriptionUsersWidget.get('addSubscriberNode'), 'click', function(){
                    Dialogbox.addChild(searchAccountWidget);
                    Dialogbox.show();
                });

                aspect.after(searchAccountWidget, 'onSelectUser', function(user){
                    subscriptionUsersWidget.addSubscriber(user).then(function(result){
                        if(result && result == user.id) Dialogbox.hide();
                    })
                });

                // Для Гостей
                on(subscriptionGuestsWidget.get('addSubscriberNode'), 'click', function(){
                    Dialogbox.addChild(searchAccountWidget);
                    Dialogbox.show();
                });

                aspect.after(searchAccountWidget, 'onSelectGuest', function(guest){
                    subscriptionGuestsWidget.addSubscriber(guest).then(function(result){
                        if(result && result == guest.id) Dialogbox.hide();
                    })
                });

                contentPane.addChild(container);
            } else {
                contentPane.addChild(dijitRegistry.byId(event.newPath));
            }
        });

        (function(){
            router.startup();
            on(dom.byId('detailNode'), 'click', function(){router.go('get-detail')});
            on(dom.byId('subscribersNode'), 'click', function(){router.go('get-subscribers')});
            if(hash().length == 0) router.go('get-detail');
        })();


        function partialEditingHelper(form){
            var Helper = {
                onSend: function(field){}
            };
            array.forEach(form.elements, function(element){
                var label = query('label[for="' + element.getAttribute('id')+ '"]')[0];
                on(label, 'click', function(event){
                    domClass.toggle(event.target, "hidden");
                    domClass.toggle(element, "hidden");
                    element.focus();
                });
                switch(element.type) {
                    case 'text' || 'textarea':
                        on(element, 'blur', function(event){
                            var data = {};
                            data[event.target.name] = domForm.fieldToObject(event.target);
                            Helper.onSend(data).then(function(result){
                                    if(result > -1){
                                    label.innerHTML = domForm.fieldToObject(event.target);
                                } else {
                                    event.target.value = label.innerHTML;
                                }
                                domClass.toggle(event.target, "hidden");
                                domClass.toggle(label, "hidden");
                            });
                        });
                        break;
                    case 'select':
                        on(element, 'change', function(event){

                        });
                        break;
                }
            });
            return Helper;
        }


    });
});

JS;
$this->headScript()->appendScript($jScript, $type = 'text/javascript')
?>
<div id="OP" style="width: 300px; height: 200px; background: blue; position: relative; display: none">

</div>
<div style="border-bottom: 3px solid #444; margin-bottom: 15px"><h3>Договор #<?=$agreement->getData()->getId()?></h3></div>
<p id="routerControls">
    <button id="detailNode">Информация</button>
    <button id="subscribersNode">Подписчики</button>
</p>
<div id="content"></div>
<div class="hidden">
<div id="agreementDetail">
    <form id="edit-agreement-detail-form">
        <table class="table table-bordered" id="_2_">
            <colgroup>
                <col width="200">
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th colspan="2">Информация по Договору #<?=$agreement->getData()->getId()?></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>Срок действия:</th>
                    <td>
                        <span style="display: inline-block">
                            <?=date('d.m.Y', $agreement->getData('date_begin'))?> &mdash;
                        </span>
                        <span style="display: inline-block">
                            <label for="edit-agreement-detail-form-date-end" style="border-bottom: 1px dashed #005580; color: #005580; cursor: pointer"><?=date('d.m.Y', $agreement->getData('date_end'))?></label>
                            <input id="edit-agreement-detail-form-date-end" name="date_end" type="text" class="hidden" value="<?=date('d.m.Y', $agreement->getData('date_end'))?>">
                        </span>
                   </td>
                </tr>
                <tr>
                    <th>ЛК/Тариф:</th>
                    <td>
                        <?php $tariff = HM_Model_Billing_Tariff::load($agreement->getData('tariff'));?>
                        <?=$tariff->getLine()->getData('name')?> / <?=$tariff->getData('name')?></td>
                </tr>
                <tr>
                    <th>Компания-партнер:</th>
                    <td>
                        <?php $company = HM_Model_Billing_Company::load($agreement->getData('company_owner')); ?>
                        <?=$company->getData('name')?> (<?=$company->getData('inn')?> / <?=$company->getData('kpp')?>)
                    </td>
                </tr>
                <tr>
                    <th>Компания-контрагент:</th>
                    <td>
                        <?php $companyClient = HM_Model_Billing_Company::load($agreement->getData('company_client')); ?>
                        <?=$companyClient->getData('name')?> (<?=$companyClient->getData('inn')?> / <?=$companyClient->getData('kpp')?>)
                    </td>
                </tr>
            </tbody>
        </table>

        <table class="table table-bordered">
            <colgroup>
                <col width="200">
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th colspan="3">Баланс по договору</th>
                </tr>
                <tr>
                    <th>Время (сек.)</th>
                    <th>Сумма (руб.)</th>
                    <th>Сообщений</th>
                </tr>
            </thead>
            <tbody>
                <?php $invoiceBalance = $companyClient->getInvoiceBalance($agreement->getData('invoice'));?>
                <tr>
                    <td><?=$invoiceBalance->get('sum_time')?></td>
                    <td><?=$invoiceBalance->get('sum_money')?></td>
                    <td><?=$invoiceBalance->get('messages_count')?></td>
                </tr>
            </tbody>
        </table>
    </form>
</div>
</div>
<?php else: ?>
<div class="alert alert-error">Договор не найден</div>
<?php endif; ?>

<!-- Шаблон для Активных подписчиков -->
<script id="subscription-users-template" type="text">
    <form id="edit-subscription-users-form">
        <table class="table table-bordered">
            <colgroup>
                <col width="50">
                <col width="50">
                <col width="200">
                <col width="200">
                <col>
            </colgroup>
            <thead>
            <tr>
                <th colspan="5">Активные подписчики</th>
            </tr>
            <tr>
                <th>#ID</th>
                <th>#</th>
                <th>Логин</th>
                <th>Email</th>
                <th>Ф.И.О</th>
            </tr>
            </thead>
            <tfoot>
            <tr>
                <td colspan="5">
                    <input type="hidden" value="14" name="agreement">
                    <button data-dojo-attach-point="addSubscriberNode" name="add" type="button">Добавить</button>
                    <button data-dojo-attach-point="removeSubscriberNode" name="remove" type="button">Удалить</button>
                </td>
            </tr>
            </tfoot>
            <tbody data-dojo-attach-point="subscribersNode"></tbody>
        </table>
    </form>
</script>

<script id="subscription-user-row-template" type="text">
    <tr id="subscriptionUserNode_${id}">
        <td>${id}</td>
        <td><input type="checkbox" value="${id}" name="users[]"></td>
        <td>${data.login}</td>
        <td>${data.email}</td>
        <td>${data.last_name} ${data.first_name} ${data.middle_name}</td>
    </tr>
</script>

<!-- Шаблон для Гостей -->
<script id="subscription-guest-template" type="text">
    <form id="edit-subscription-guests-form">
        <table class="table table-bordered">
            <colgroup>
                <col width="50">
                <col width="50">
                <col width="200">
                <col>
            </colgroup>
            <thead>
            <tr>
                <th colspan="4">Ожидаемые подписчики</th>
            </tr>
            <tr>
                <th>#ID</th>
                <th>#</th>
                <th>Email</th>
                <th>Ф.И.О</th>
            </tr>
            </thead>
            <tfoot>
            <tr>
                <td colspan="4">
                    <input type="hidden" value="14" name="agreement">
                    <button data-dojo-attach-point="addSubscriberNode" name="add" type="button">Добавить</button>
                    <!--<button data-dojo-attach-point="resendSubscriberNode" name="add" type="button">Оповестить</button>-->
                    <button data-dojo-attach-point="removeSubscriberNode" name="remove" type="button">Удалить</button>
                </td>
            </tr>
            </tfoot>
            <tbody data-dojo-attach-point="subscribersNode"></tbody>
        </table>
    </form>
</script>

<script id="subscription-guest-row-template" type="text">
    <tr id="subscriptionGuestNode_${id}">
        <td>${id}</td>
        <td><input type="checkbox" value="${id}" name="guests[]"></td>
        <td>${data.email}</td>
        <td>${data.last_name} ${data.first_name} ${data.middle_name}</td>
    </tr>
</script>

<!-- Шаблоны поиска Пользователя -->
<script id="search-account-template" type="text">
    <div data-dojo-attach-point="overlayNode" style="width: 650px; position: relative">
        <div data-dojo-attach-point="searchAccountContainerNode">
            <form data-dojo-attach-point="searchAccountFormNode" id="search-account-form">
                <table class="table table-bordered">
                    <tbody>
                    <tr>
                        <td>
                            <label>Введите Email учетной записи:</label>
                            <input type="text" name="filters[equal][email][]">
                        </td>
                    </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>
                                <button name="send" type="submit">Найти</button>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </form>
        </div>
        <div data-dojo-attach-point="searchAccountResultsContainerNode"></div>
    </div>
</script>

<script id="search-account-user-result-template" type="text">
    <form id="search-account-user-result-form">
        <table class="table table-bordered">
            <colgroup>
                <col width="50"/>
                <col width="150"/>
                <col width="150"/>
                <col/>
            </colgroup>
            <thead>
                <tr>
                    <th colspan="4">Найдена учетная запись Пользователя</th>
                </tr>
                <tr>
                    <th>#ID</th>
                    <th>Email</th>
                    <th>Логин</th>
                    <th>Ф.И.О</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>${id}</td>
                    <td>${data.email}</td>
                    <td>${data.login}</td>
                    <td>${data.last_name} ${data.first_name} ${data.middle_name}</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4">
                        <button name="select" type="button">Выбрать</button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </form>
</script>

<script id="search-account-guest-result-template" type="text">
    <form id="search-account-guest-result-form">
        <table class="table table-bordered">
            <colgroup>
                <col width="50"/>
                <col width="150"/>
                <col/>
            </colgroup>
            <thead>
                <tr>
                    <th colspan="3">Найдена учетная запись Гостя</th>
                </tr>
                <tr>
                    <th>#ID</th>
                    <th>Email</th>
                    <th>Ф.И.О</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>${id}</td>
                    <td>${data.email}</td>
                    <td>${data.last_name} ${data.first_name} ${data.middle_name}</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3">
                        <button name="select" type="button">Выбрать</button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </form>
</script>

<script id="search-account-guest-register-template" type="text">
    <form id="search-account-guest-register-form">
        <table class="table table-bordered">
            <colgroup>
                <col width="30%">
                <col width="30%">
                <col>
            </colgroup>
            <tbody>
                <tr>
                    <th colspan="3">
                        На &laquo;<strong>${email}</strong>&raquo; будет добавлена новая учетная запись Гостя
                    </th>
                </tr>
                <tr>
                    <td>
                        <label>Фамилия:</label>
                        <input type="text" value="" name="guest[last_name]">
                    </td>
                    <td>
                        <label>Имя:</label>
                        <input type="text" value="" name="guest[first_name]">
                    </td>
                    <td>
                        <label>Отчество:</label>
                        <input type="text" value="" name="guest[middle_name]">
                    </td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3">
                        <input type="hidden" value="${email}" name="guest[email]">
                        <button name="send" type="submit">Сохранить</button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </form>
</script>