<?php
$companies = $this->companies;
$companyColl = new HM_Model_Billing_Company_Collection();
$companyColl->addToCollection($companies);
$lineColl = new HM_Model_Counseling_Structure_Line_Collection();
foreach($companyColl->getObjectsIterator() as $company){
    $lineColl->addEqualFilter('company', $company->getData()->getId());
}
$lineColl->getCollection();
$tariffColl = new HM_Model_Billing_Tariff_Collection();
foreach($lineColl->getObjectsIterator() as $line){
    $tariffColl->addToCollection($line->getTariffs());
}
$linesStore = Zend_Json::encode($lineColl->toArray());
$tariffsStore = Zend_Json::encode($tariffColl->toArray());
$companiesStore = Zend_Json::encode($companyColl->toArray());

?>
<?php
$jScript = <<<JS
require([
    "dojo/_base/declare", // declare
    "dojo/Stateful",
    "dojo/dom",
    "dojo/dom-style",
    "dojo/html",
    "dojo/dom-class",
    "dojo/dom-construct",
    "dojo/dom-attr",
    "dojo/dom-form",
    "dojo/json",
    "dojo/string",
    "dojo/_base/array",
    "dojo/date/locale",
    "dojo/on",
    "dojo/_base/lang",
    "dojo/query",
    "dojo/hash",
    "dojo/router",
    "dojo/store/Memory",
    "dojo/store/Observable",
    "dojo/store/Cache",
    "dojo/aspect",
    "core/Layout",
    "core/helper/Validation",
    "core/helper/form",
    "core/helper/common",
    "core/helper/fn",
    "dijit/Dialog",
    "core/Dispatcher",
    "dojo/Deferred",
    "core/Ajax",
    "core/layout/Overlay",
    "core/widgets/SearchCompanyDialog",
    "dijit/registry",
    "dijit/popup",
    "dijit/layout/ContentPane",
    "dijit/_WidgetBase",
    "dijit/_WidgetsInTemplateMixin",
    "dijit/_Container",
    "dijit/_Contained",
    "dijit/_TemplatedMixin",
    "dijit/TooltipDialog",
    "dojo/text!app/modules/manager/billing/template/test.html"
], function(declare, Stateful, dom, domStyle, domHtml, domClass, domConstruct, domAttr, domForm, JSON, string, array, dateLocale,
on, lang, query, hash, router, storeMemory, storeObservable, storeCache, aspect, coreLayout, coreValidation, coreHelperForm,
coreHelperCommon, HelperFn, dijitDialog, coreDispatcher, Deferred, Ajax, Overlay, coreSearchCompanyDialog, dijitRegistry, dijitPopup,
ContentPane, _WidgetBase, _WidgetsInTemplateMixin, _Container, _Contained, _TemplatedMixin, TooltipDialog, text){

    dojo.ready(function(){


        var linesStore = new storeMemory({
            idProperty: 'id',
            data: $linesStore
        });

        var tariffsStore = new storeMemory({
            idProperty: 'id',
            data: $tariffsStore
        });

        var companiesOwnersStore = new storeMemory({
            idProperty: 'id',
            data: $companiesStore
        });


// ============================================================================

        // Контент-контейнер
        var contentPane = new ContentPane({
            id: 'content',
            style: {padding: 0, margin: 0,  overflow: "hidden"},
            clear: function(){
                array.forEach(contentPane.getChildren(), function(widget){
                    contentPane.removeChild(widget);
                });
            }
        }, 'content');

        // Общий контейнер по виджетам типа "Компания"
        var CompanyContainer = {
            companiesStore: {},
            getCompanyAboutWidget: function(options){
                var Widget = declare("CompanyContainerList", [_WidgetBase, _TemplatedMixin], {
                    templateString: dom.byId('company-about-node-template').innerHTML,
                    data: null,
                    overlay: null,
                    postCreate: function(){
                        if(!this.overlay) this.overlay = new Overlay({domNode: this.domNode, delay: 0});
                    },
                    fillTemplate: function(item){
                        this.get('nameNode').innerHTML = item.data['name'];
                        this.get('innKppNode').innerHTML = item.data['inn'] + ' / ' + item.data['kpp'];
                    },
                    findCompany: function(callback){
                        var response = Ajax.load(
                            Ajax.url('api/1/company/' + this.data.id), {
                            overlay: this.overlay
                        });
                        response.then(function(response){
                            callback(response.data[0]);
                        });
                        return response;
                    }
                });
                return new Widget(options || {});
            },
            // Виджет со списом контрагентов
            getCompanyClientsListWidget: function(options){
                var Widget = declare("CompanyContainerList", [_WidgetBase, _Container, _TemplatedMixin], {
                    templateString: dom.byId('company-owner-node-template').innerHTML,
                    companyClientsStore: null,
                    containerNode: null,
                    data: null,
                    postMixInProperties: function(){
                        if(!this.id) this.id = this._getWidgetId();
                        this.companyClientsStore = new storeMemory();
                    },
                    buildRendering: function(){
                        this.inherited(arguments);
                        this.containerNode = this.get('companyClientsNode');
                        var _dijit = this;
                        on(this.get('companyClientsFilter'), 'a:click', function(event){
                            _dijit._companyClientsFilter(event.target);
                        })
                    },
                    postCreate: function(){
                        this._overlayAjax = new Overlay({
                            domNode: this.domNode
                        });
                        var _dijit = this;
                        // Первичная загрузка данных
                        var handler = on(this.get('showChildNode'), 'click', function(event){
                            _dijit.fetchCompanyClients(function(items){
                                array.forEach(items, function(item){
                                    _dijit.insertChildNode(item);
                                });
                                setTimeout(function(){
                                    query('button', _dijit.get('toggleChildNodes')).forEach(function(button){
                                        on(button, 'click', function(){
                                            _dijit.toggleHandler(button);
                                        });
                                    });
                                    _dijit.toggleHandler(event.target);
                                }, _dijit._overlayAjax.delay);
                                handler.remove();
                            });
                        });
                    },
                    _getWidgetId: function(){
                        if(!this.id) return this.declaredClass + '_' + this.data.id;
                        else return this.id;
                    },
                    _getChildNodeId: function(id){
                        return 'CompanyContainerListNode_' + this.data.id + '_' + id;
                    },
                    removeChildNode: function(itemId){
                        // TODO: Диджит физически не удаляется
                        this.removeChild(dijitRegistry.byId(this._getChildNodeId(itemId)));
                        this.companyClientsStore.remove(itemId);
                    },
                    insertChildNode: function(item, options){
                        this.companyClientsStore.add(item);
                        if(dijitRegistry.byId(this._getChildNodeId(item.id))) {
                            this.addChild(this._getChildNodeId(item.id));
                        } else {
                            this.addChild(this.createChildNode(
                                lang.mixin({
                                    data: lang.mixin(item, {'company_owner': this.data.id}),
                                    id: this._getChildNodeId(item.id)
                                }, options)
                            ));
                        }
                    },
                    toggleHandler: function(node){
                        var _dijit = this;
                        domClass.add(node, "hidden");
                        if(node == _dijit.get('showChildNode')){
                            domClass.remove(_dijit.get('hideChildNode'), "hidden");
                            domClass.remove(_dijit.get('companyClientsNode'), "hidden");
                        } else {
                            domClass.remove(_dijit.get('showChildNode'), "hidden");
                            domClass.add(_dijit.get('companyClientsNode'), "hidden");
                        }
                    },
                    // Загрузка списка клиентов сервера
                    fetchCompanyClients: function(callback){
                        var response = Ajax.load(
                            Ajax.url('api/1/company/' + this.data.id + '/get-clients'), {
                            overlay: this._overlayAjax
                        });
                        response.then(function(response){
                            callback(response.data);
                        });
                        return response;
                    },
                    _companyClientsFilter: function(node){
                        var field = node.getAttribute('data-args-filter-by');
                        var dijitId = 'companyClientsFilterBy' + field.charAt(0).toUpperCase() + field.substr(1) +  '_' + this.data.id;

                        var tooltipDialog;
                        if(!dijitRegistry.byId(dijitId)) {
                            var contentDom = domConstruct.toDom(
                                string.substitute(dom.byId('company-client-filter-template').innerHTML, {field: field})
                            );

                            var _dijit = this;
                            on(query('form', contentDom)[0], 'submit', function(event){
                                event.preventDefault();
                                // Обрезать отступы строки
                                array.map(event.target.elements, function(element){
                                    if(element.type.toLowerCase() == 'text'){
                                        element.value = string.trim(element.value);
                                    }
                                    return element;
                                });
                                _dijit._companyClientsFilterProcess(event.target);
                            });

                            tooltipDialog = new TooltipDialog({
                                id: dijitId,
                                content: contentDom
                            });
                        } else tooltipDialog = dijitRegistry.byId(dijitId);

                        dijitPopup.open({
                            popup: tooltipDialog,
                            around: node
                        });

                        tooltipDialog.focus();
                        tooltipDialog.onBlur = function(){
                            dijitPopup.close(tooltipDialog);
                        };
                    },
                    _companyClientsFilterProcess: function(form){
                        var _dijit = this;
                        Ajax.load(
                            Ajax.url('api/1/company/query'), {
                            query: (function(){
                                var query = domForm.toObject(form);
                                delete query['send'];
                                delete query['field'];
                                return query;
                            })(),
                            overlay: this._overlayAjax
                        }).then(function(response){
                            var t = HelperFn.enumerable(_dijit.companyClientsStore.data, response.data);
                            _dijit.companyClientsStore.query().forEach(function(item){
                                if(array.indexOf(t.intersect, item.id) > -1) dijitRegistry.byId(_dijit._getChildNodeId(item.id)).show();
                                else dijitRegistry.byId(_dijit._getChildNodeId(item.id)).hide()
                            });

                            array.forEach(response.data, function(item){
                                if(array.indexOf(t.distinct, item.id) > -1) _dijit.insertChildNode(item, {isNew: true})
                            });

                        });
                    },
                    createChildNode: function(options){
                        var Node = declare("companyClientNode", [_WidgetBase, _Contained, _TemplatedMixin], {
                            templateString: dom.byId('company-client-node-template').innerHTML,
                            data: null,
                            isNew: false,
                            postMixInProperties: function(){
                                if(!this.id) this.id = this._getWidgetId();
                            },
                            _setDataAttr: function(){
                                if(true === this.isNew) {
                                    this.get('companyClientOptionsNode').innerHTML = '<a data-dojo-attach-point="createAgreementNode">+ новый договор</a>';
                                } else {
                                    this.get('companyClientOptionsNode').innerHTML = '<a data-dojo-attach-point="getAgreementsListNode">см. договора</a>';
                                }
                            },
                            _getWidgetId: function(){
                                return this.declaredClass + '_' + this.data.id;
                            },
                            postCreate: function(){
                                var _widget = this;
                                query('a[data-dojo-attach-point]', _widget.get('companyClientOptionsNode')).forEach(function(item){
                                    switch(domAttr.get(item, 'data-dojo-attach-point')){
                                        case "createAgreementNode":
                                            on(item, 'click', function(){
                                                AgreementContainer.getAgreementCreateWidget({
                                                    data: {
                                                        'company_owner': _widget.data['company_owner'],
                                                        'company_client': _widget.data.id
                                                    }
                                                }).show();
                                            });
                                            break;
                                        case "getAgreementsListNode":
                                            on(item, 'click', function(){
                                                router.go(
                                                    HelperFn.doPath('get-agreements=:company_owner/:company_client', {
                                                        'company_owner': _widget.data['company_owner'],
                                                        'company_client': _widget.data.id
                                                    })
                                                );
                                            });
                                            break;
                                    }
                                });
                            },
                            hide: function(){
                                domClass.add(this.domNode, "hidden");
                            },
                            show: function(){
                                domClass.remove(this.domNode, "hidden");
                            }
                        });
                        return new Node(options || {});
                    }
                });

                return new Widget(options || {});
            }
        };

        // Контейнер договоров
        var AgreementContainer = {
            getAgreementCreateWidget: function(options){
                var Widget = declare("AgreementCreateWidget", [dijitDialog], {
                    data: null,
                    title: 'Новый договор',
                    buildRendering: function(){
                        this.inherited(arguments);
                        var that = this;
                        var onShowHandler = aspect.after(this, 'onShow', function(){
                            that.Overlay = new Overlay({
                                domNode: this.containerNode
                             });
                            // Взависимости от результата получения данных - текущая обработка
                            // будет повторяться или нет
                            this._getContent(onShowHandler, function(){
                                domStyle.set(that.Overlay.overlayNode, {
                                    width: "auto",
                                    height: "auto"
                                });
                                on(dom.byId('form-create-agreement'), 'submit', function(event){
                                    event.preventDefault();
                                    console.log(event.target);
                                    var request = Ajax.send('http://192.168.1.51/manager/billing/create-agreement', {
                                        overlay: that.Overlay,
                                        data: domForm.toObject(event.target)
                                    });
                                    request.then(function(response){
                                        if(response.result > -1){
                                            that.hide();
                                        }
                                    });
                                });
                            });
                        });
                    },
                    _getContent: function(onShowHandler, callback){
                        var that = this;
                        // Отразить заглушку на время загрузки данных
                        domStyle.set(this.Overlay.overlayNode, {
                            width: "200px",
                            height: "100px"
                        });
                        var request = Ajax.load('http://192.168.1.51/manager/billing/create-agreement', {
                            handleAs: 'html',
                            overlay: this.Overlay,
                            query: that.data
                        });
                        request.then(function(response){
                            setTimeout(function(){
                                that.set('content', response);
                                if(callback) callback(response);
                                onShowHandler.remove();
                            }, that.Overlay.delay);
                        },function(){
                            setTimeout(function(){
                                that.set('content', 'Неудалось загрузить контент');
                            }, that.Overlay.delay);
                        });
                        // Событие по закрытию диалога во время загрузки контента
                        var onHideHandler = aspect.after(this, 'hide', function(){
                            onHideHandler.remove();
                            that.destroy();
                            if(!request.isFulfilled()){
                                request.cancel();
                                //Ajax.Messenger.send('PROCESS_STATE_ABORTED');
                            }
                        });

                        return request;
                    }
                });

                return new Widget(options || {});
            },
            // Построить список договоров
            getAgreementsListWidget: function(options){
                var _AgreementContainer = this;
                var Widget = declare("AgreementsListWidget", [_WidgetBase, ContentPane, _TemplatedMixin], {
                    templateString: null,
                    agreementsStore: null,
                    data: null, // company_owner, company_client
                    style: {padding: 0, margin: 0, overflow: "hidden"},
                    overlay: null,
                    postMixInProperties: function(){
                        this.agreementsStore = new storeMemory();
                        this.templateString = dom.byId('agreements-container-template').innerHTML;
                        if(!this.id) this.id = this._getWidgetId();
                    },
                    _getWidgetId: function(){
                        return this.declaredClass + '_' + this.data['company_owner'] + '_' + this.data['company_client'];
                    },
                    buildRendering: function(){
                        this.inherited(arguments);
                        this.containerNode = this.get('listNode');
                    },
                    postCreate: function(){
                        var _widget = this;
                        if(!this.overlay) this.overlay = new Overlay({domNode: this.domNode});
                        on(this.get('createWidgetNode'), 'click', function(event){
                            var dialog = _AgreementContainer.getAgreementCreateWidget({data: _widget.data});
                            dialog.show();
                        });
                    },
                    insertChildNode: function(item){
                        this.agreementsStore.add(item);
                        this.addChild(this.createChildNode({data: item}));
                    },
                    fetchAgreements: function(callback){
                        var _widget = this;
                        var request = Ajax.load(
                            Ajax.url('api/1/agreement/query'), {
                            query: {
                                'filters[equal][company_owner][]': _widget.data['company_owner'],
                                'filters[equal][company_client][]': _widget.data['company_client']
                            },
                            overlay: this.overlay
                        });
                        request.then(function(response){
                            callback(response.data);
                        });
                        return request;
                    },
                    createChildNode: function(options){
                        var Node = declare("AgreementsListWidgetNode", [_WidgetBase, _Contained, _TemplatedMixin], {
                            templateString: dom.byId('agreement-node-template').innerHTML,
                            data: null,
                            _setDataAttr: function(){
                                this.get('dateBeginNode').innerHTML = this.formatDate(this.data.data['date_begin']);
                                this.get('dateEndNode').innerHTML = this.formatDate(this.data.data['date_end']);
                                this.get('dateExpiresNode').innerHTML = Math.ceil((this.data.data['date_end'] - appConfig.serverTimestamp) / 86400);
                                this.get('lineNode').innerHTML = linesStore.get(15).data.name;
                                this.get('tariffNode').innerHTML = tariffsStore.get(27).data.name;
                                this.get('invoiceNode').innerHTML = "#" + this.data.data['invoice'];
                            },
                            formatDate: function(dateValue){
                                dateValue = dateValue || 0;
                                var date = new Date(dateValue * 1000);
                                var dateFormat = {full: ''};
                                dateFormat.date = (date.getDate() > 9) ? date.getDate() : '0' + date.getDate();
                                dateFormat.month = (date.getMonth() + 1) > 9 ? (date.getMonth() + 1) : '0' + (date.getMonth() + 1);
                                dateFormat.year = date.getFullYear();
                                return dateFormat.full.concat(dateFormat.date, '.' + dateFormat.month, '.' + dateFormat.year);
                            }
                        });
                        return new Node(options || {});
                    }
                });

                return new Widget(options || {});
            }
        };

        router.register('get-companies', function(event){
            contentPane.clear();
            if(!dijitRegistry.byId(event.newPath)){
                var container = new ContentPane({
                    id: event.newPath,
                    style: {padding: 0, margin: 0, overflow: "hidden"}
                });
                array.forEach(companiesOwnersStore.data, function(item){
                    container.addChild(CompanyContainer.getCompanyClientsListWidget({data: item}));
                });
                contentPane.addChild(container);
            } else {
                contentPane.addChild(dijitRegistry.byId(event.newPath));
            }
        });

        // Роутер договоров
        router.register('get-agreements=:company_owner/:company_client', function(event){
            contentPane.clear();
            if(!dijitRegistry.byId(event.newPath)){
                var container = new ContentPane({
                    id: event.newPath,
                    style: {padding: 0, margin: 0, overflow: "hidden"}
                });

                contentPane.addChild(container);
                var OverlayContentPane = new Overlay({domNode: container.domNode});
                domStyle.set(OverlayContentPane.overlayNode, "height", "500px");
                OverlayContentPane.show();

                var agreementsListWidget = AgreementContainer.getAgreementsListWidget({data: event.params});
                var companyAboutWidget = CompanyContainer.getCompanyAboutWidget({data: {id: event.params['company_client']}});

                (function(){
                    var promise = companyAboutWidget.findCompany(function(item){
                        companyAboutWidget.fillTemplate(item);
                    });
                    promise.always(function(){
                        agreementsListWidget.fetchAgreements(function(items){
                            array.forEach(items, function(item){
                                agreementsListWidget.insertChildNode(item);
                            });
                            OverlayContentPane.hide();
                            setTimeout(function(){
                                domClass.remove(agreementsListWidget.containerNode, "hidden");
                                container.addChild(companyAboutWidget);
                                container.addChild(agreementsListWidget);
                            }, OverlayContentPane.delay);
                        });
                    });

                })();

            } else {
                contentPane.addChild(dijitRegistry.byId(event.newPath));
            }
        });

        (function(){
            router.startup();
            if(hash().length == 0) router.go('get-companies');
        })();

// =====================================================================================================

    });
});

JS;
$this->headScript()->appendScript($jScript, $type = 'text/javascript')
?>
<div id="content"></div>
<script id="agreements-container-template" type="text">
<div>
    <table class="table table-bordered" id="agreements-container">
        <colgroup>
            <col width="50"/>
            <col width="70"/>
            <col width="300"/>
            <col width="300"/>
            <col width="100"/>
            <col width="100">
            <col/>
            <col/>
        </colgroup>
        <thead>
        <tr>
            <th>#ID</th>
            <th>Счет №</th>
            <th>ЛК</th>
            <th>Тариф</th>
            <th>Начало</th>
            <th>Окончание</th>
            <th>Истекает (дн.)</th>
            <th>Опции</th>
        </tr>
        </thead>
        <tfoot>
        <tr>
            <td colspan="8">
                <button type="button" data-dojo-attach-point="createWidgetNode">Новый договор</button>
            </td>
        </tr>
        </tfoot>
        <tbody data-dojo-attach-point="listNode" class="hidden"></tbody>
    </table>
</div>
</script>

<script id="agreement-node-template" type="text">
    <tr id="agreement-node-${data.id}">
        <td data-dojo-attach-point="idNode">${data.id}</td>
        <td data-dojo-attach-point="invoiceNode"></td>
        <td data-dojo-attach-point="lineNode"></td>
        <td data-dojo-attach-point="tariffNode"></td>
        <td data-dojo-attach-point="dateBeginNode"></td>
        <td data-dojo-attach-point="dateEndNode"></td>
        <td data-dojo-attach-point="dateExpiresNode"></td>
        <td data-dojo-attach-point=""><a href="<?=$this->baseUrl('manager/billing/agreement/id/');?>${data.id}">просмотр</a></td>
    </tr>
</script>

<script id="company-client-filter-template" type="text">
    <form id="company-clients-filter" style="margin: 0">
        <input type="text" name="filters[equal][${field}][]" value=""/>
        <input type="hidden" name="field" value="${field}"/><br/>
        <button type="submit" name="send">применить</button>
    </form>
</script>

<script id="company-client-node-template" type="text">
    <tr data-dojo-attach-point="companyClientNode_${data.id}">
        <td>${data.id}</td>
        <td>${data.data.name}</td>
        <td>${data.data.inn}</td>
        <td>${data.data.kpp}</td>
        <td data-dojo-attach-point="companyClientOptionsNode"></td>
    </tr>
</script>

<script id="company-client-detail-node-template" type="text">

    <tr data-dojo-attach-point="companyClientNode_${data.id}">
        <td>${data.id}</td>
        <td>${data.data.name}</td>
        <td>${data.data.inn}</td>
        <td>${data.data.kpp}</td>
        <td data-dojo-attach-point="companyClientOptionsNode"></td>
    </tr>
</script>

<script id="company-owner-node-template" type="text">
<div>
    <table class="table table-bordered" data-dojo-attach-point="companyOwnerNode_${data.id}">
        <colgroup>
            <col width="50"/>
            <col width="450"/>
            <col width="150"/>
            <col width="150"/>
            <col/>
        </colgroup>
        <thead>
            <tr>
                <th colspan="5">
                    ${data.data.name} (${data.id})
                </th>
            </tr>
        </thead>
        <tfoot>
            <tr data-dojo-attach-point="toggleChildNodes">
                <td colspan="5">
                    <button type="button" data-dojo-attach-point="showChildNode">&darr; развернуть</button>
                    <button type="button" data-dojo-attach-point="hideChildNode" type="button" class="hidden">&uarr; свернуть</button>
                </td>
            </tr>
        </tfoot>
        <tbody class="hidden" data-dojo-attach-point="companyClientsNode">
            <tr data-dojo-attach-point="companyClientsFilter">
                <th><a data-args-filter-by="id">#ID</a></th>
                <th>Контрагент</th>
                <th><a data-args-filter-by="inn">ИНН</a></th>
                <th>КПП</th>
                <th>Опции</th>
            </tr>
        </tbody>
    </table>
</div>
</script>

<script id="company-about-node-template" type="text">
    <div>
        <table class="table table-bordered">
            <colgroup>
                <col/>
            </colgroup>
            <thead>
                <tr>
                    <th data-dojo-attach-point="nameNode">Наименование</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td data-dojo-attach-point="innKppNode">Инн/Кпп</td>
                </tr>
            </tbody>
        </table>
    </div>
</script>